generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String // Will store hashed password
  role      UserRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  admin     Admin?   @relation("UserAdmin")
  student   Student? @relation("UserStudent")
  teacher   Teacher? @relation("UserTeacher")
  parent    Parent?  @relation("UserParent")
}

model Admin {
  id       String @id
  username String @unique
  civilId  String @unique
  user     User?  @relation("UserAdmin", fields: [id], references: [id], onDelete: Cascade)
}

model Student {
  id          String       @id
  username    String       @unique
  name        String
  surname     String
  civilId     String       @unique
  email       String?      @unique
  phone       String?      @unique
  address     String
  img         String?
  bloodType   String
  sex         UserSex
  createdAt   DateTime     @default(now())
  parentId    String
  parent      Parent       @relation(fields: [parentId], references: [id])
  classId     Int
  class       Class        @relation(fields: [classId], references: [id])
  gradeId     Int
  grade       Grade        @relation(fields: [gradeId], references: [id])
  attendances Attendance[]
  results     Result[]
  birthday    DateTime
  user        User?        @relation("UserStudent", fields: [id], references: [id], onDelete: Cascade)
}

model Teacher {
  id                   String               @id
  username             String               @unique
  name                 String
  surname              String
  civilId              String               @unique
  email                String?              @unique
  phone                String?              @unique
  address              String
  img                  String?
  bloodType            String
  sex                  UserSex
  createdAt            DateTime             @default(now())
  subjects             Subject[]
  lessons              Lesson[]
  classes              Class[]
  birthday             DateTime
  user                 User?                @relation("UserTeacher", fields: [id], references: [id], onDelete: Cascade)
  attendances          TeacherAttendance[]
  originalReplacements TeacherReplacement[] @relation("OriginalTeacher")
  replacementsDone     TeacherReplacement[] @relation("ReplacementTeacher")
}

model Parent {
  id        String    @id
  username  String    @unique
  name      String
  surname   String
  civilId   String    @unique
  email     String?   @unique
  phone     String    @unique
  address   String
  createdAt DateTime  @default(now())
  students  Student[]
  user      User?     @relation("UserParent", fields: [id], references: [id], onDelete: Cascade)
}

model Grade {
  id    Int @id @default(autoincrement())
  level Int @unique

  students Student[]
  classess Class[]
}

model Class {
  id       Int    @id @default(autoincrement())
  name     String @unique
  capacity Int

  supervisorId  String?
  supervisor    Teacher?       @relation(fields: [supervisorId], references: [id])
  lessons       Lesson[]
  students      Student[]
  gradeId       Int
  grade         Grade          @relation(fields: [gradeId], references: [id])
  events        Event[]
  announcements Announcement[]
}

model Subject {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  teachers Teacher[]
  lessons  Lesson[]
}

model Lesson {
  id        Int      @id @default(autoincrement())
  name      String
  day       Day
  startTime DateTime
  endTime   DateTime

  subjectId    Int
  subject      Subject              @relation(fields: [subjectId], references: [id])
  classId      Int
  class        Class                @relation(fields: [classId], references: [id])
  teacherId    String
  teacher      Teacher              @relation(fields: [teacherId], references: [id])
  exams        Exam[]
  assignments  Assignment[]
  attendances  Attendance[]
  replacements TeacherReplacement[]
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime

  lessonId Int
  lesson   Lesson   @relation(fields: [lessonId], references: [id])
  results  Result[]
}

model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startDate DateTime
  dueDate   DateTime

  lessonId Int
  lesson   Lesson   @relation(fields: [lessonId], references: [id])
  results  Result[]
}

model Result {
  id    Int @id @default(autoincrement())
  score Int

  examId       Int?
  exam         Exam?       @relation(fields: [examId], references: [id])
  assignmentId Int?
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  studentId    String
  student      Student     @relation(fields: [studentId], references: [id])
}

model Attendance {
  id      Int      @id @default(autoincrement())
  date    DateTime
  present Boolean

  studentId String
  student   Student @relation(fields: [studentId], references: [id])
  lessonId  Int
  lesson    Lesson  @relation(fields: [lessonId], references: [id])
}

model TeacherAttendance {
  id        Int      @id @default(autoincrement())
  date      DateTime
  present   Boolean
  teacherId String
  teacher   Teacher  @relation(fields: [teacherId], references: [id])

  @@unique([date, teacherId])
}

model TeacherReplacement {
  id                   Int      @id @default(autoincrement())
  date                 DateTime
  originalTeacherId    String
  originalTeacher      Teacher  @relation("OriginalTeacher", fields: [originalTeacherId], references: [id])
  replacementTeacherId String
  replacementTeacher   Teacher  @relation("ReplacementTeacher", fields: [replacementTeacherId], references: [id])
  lessonId             Int
  lesson               Lesson   @relation(fields: [lessonId], references: [id])
  createdAt            DateTime @default(now())

  @@unique([date, lessonId])
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime

  classId Int?
  class   Class? @relation(fields: [classId], references: [id])
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime

  classId Int?
  class   Class? @relation(fields: [classId], references: [id])
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
}

enum UserRole {
  admin
  student
  teacher
  parent
}
